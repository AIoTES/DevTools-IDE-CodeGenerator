##necesito el nombre de la clase, la propiedad y el tipo de dato de la propiedad
#set($axioms = ${ontology.getAxioms()})
#set($data_props = $ontology.getAxioms($AxiomType.DATA_PROPERTY_DOMAIN))
#macro(getSuperclass $child_class)
#set($superclasses = ${reasoner.getReasoner().getSuperClasses($child_class,true)})
#set($parent_stack = "")
#foreach($parent in ${superclasses.getNodes()})
#foreach($last_parent in ${parent.getEntities()})
#set($parent_stack = $parent_stack + ${last_parent.getIRI().getFragment()} + ",")
#end
#end
${parent_stack.substring(0,${parent_stack.lastIndexOf(",")})} ##
#end

#macro(generateInterface)
public interface ${class.getIRI().getFragment()} implements #getSuperclass($class) {
#foreach( $f in ${ontology.getAxioms($AxiomType.DECLARATION)} )
#if(${f.getEntity().isOWLObjectProperty()})
#Methods(${f.getEntity().asOWLObjectProperty()})
#end
#end
}
#end

package $PackageName;
import $PackageName.substring(0,$PackageName.lastIndexOf(".")).*;
import java.net.URI;
import java.util.Collection;
import javax.xml.datatype.XMLGregorianCalendar;
import org.protege.owl.codegeneration.WrappedIndividual;
import org.semanticweb.owlapi.model.OWLNamedIndividual;
import org.semanticweb.owlapi.model.OWLOntology;
/**
*Default Protege Plugin Template 
*Universidad Politecnica de Madrid
*2019
**/
#macro(Methods $owlProperty)
#set($range = ${reasoner.getReasoner().getObjectPropertyRange($owlProperty,true)})
#if(${range.getNodes().iterator().hasNext()})
#foreach($t in ${range.getNodes()})
#set($propertyRange = $t)
#end
#end
/* ***************************************************
* Property ${owlProperty.getSignature().iterator().next().getIRI()}
*/

/**
* Gets all property values for the owlProperty.${owlProperty.getSignature().iterator().next().getIRI().getFragment()}() property.<p>

* @returns a collection of values for the owlProperty.${owlProperty.getSignature().iterator().next().getIRI().getFragment()}() property.
*/
Collection<? extends ${propertyRangeForClass}> getowlProperty.${owlProperty.getSignature().iterator().next().getIRI().getFragment()}()();

/**
* Checks if the class has a owlProperty.${owlProperty.getSignature().iterator().next().getIRI().getFragment()}() property value.<p>

* @return true if there is a ${owlProperty.getSignature().iterator().next().getIRI().getFragment()} property value.
*/
boolean has${owlProperty.getSignature().iterator().next().getIRI().getFragment()}();

/**
* Adds a ${owlProperty.getSignature().iterator().next().getIRI().getFragment()} property value.<p>

* @param new${owlProperty.getSignature().iterator().next().getIRI().getFragment()} the ${owlProperty.getSignature().iterator().next().getIRI().getFragment()} property value to be added
*/
void add${owlProperty.getSignature().iterator().next()}(${owlProperty.getSignature().iterator().next().getIRI().getFragment()} new${owlProperty.getSignature().iterator().next().getIRI().getFragment()});

/**
* Removes a  ${owlProperty.getSignature().iterator().next().getIRI().getFragment()} property value.<p>
* @param old ${owlProperty.getSignature().iterator().next().getIRI().getFragment()} the ${owlProperty.getSignature().iterator().next().getIRI().getFragment()} property value to be removed.
*/
void remove ${owlProperty.getSignature().iterator().next().getIRI().getFragment()}(${propertyRange} old${owlProperty.getSignature().iterator().next().getIRI().getFragment()});
#end
##generate a interface for each class
#generateInterface()
##method list


