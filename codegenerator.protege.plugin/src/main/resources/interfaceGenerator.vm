##necesito el nombre de la clase, la propiedad y el tipo de dato de la propiedad
#set($axioms = $ontology.getAxioms())
#set($data_props = $ontology.getAxioms($AxiomType.DATA_PROPERTY_DOMAIN))

#macro(methods  $prop)
#set($aux = $prop.getProperty().asOWLDataProperty() )
/* ***************************************************
 * Property ${aux.getIRI()}
 */
Collection <? extends Object > get ${prop.getDomain} ();
boolean has ${aux.getIRI().getFragment()} ();
void add ${aux.getIRI().getFragment()} (Object new ${aux.getIRI().getFragment()});
void remove ${aux.getIRI().getFragment()} (Object new ${aux.getIRI().getFragment()});
#end

#macro(generateInterface)
#foreach($ax in $axioms)
#if($ax.isOfType( $AxiomType.DECLARATION ) && $ax.getSignature().iterator().next().isOWLClass() )
public interface ${ax.getIRI().getFragment()} implements "parent" {
#set($cls=$ax.getSignature().iterator().next().asOWLClass()) 
#foreach($df in $data_props)
#if($df.getDomain().asOWLClass().equals($cls))
#methods( $df )
#end
#end
#end

#end

#parse("common.vm")
##por cada clase generar una interface
#generateInterface()
##method list


}## bracket end of interface

}